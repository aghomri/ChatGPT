<?php
provision_log("Test: Page loaded at " . date('c'));
ini_set('display_errors', 1);
error_reporting(E_ALL);
session_start();

$UI_BUILD = '2025-10-26 v16: SRAPS separated, robust CSV, full UI';
header('X-UI-Build: '.$UI_BUILD);

ini_set('default_charset', 'UTF-8');
if (function_exists('mb_internal_encoding')) mb_internal_encoding('UTF-8');
if (function_exists('mb_http_output')) mb_http_output('UTF-8');
header('Content-Type: text/html; charset=UTF-8');

/* --- LOGGING --- */
function provision_log($line){
    @file_put_contents(__DIR__ . '/../provision_debug.log', date('c').' '.$line.PHP_EOL, FILE_APPEND);
}

/* --- UTILS --- */
function clean_utf8($s) {
    if ($s === null) return '';
    if (!is_string($s)) $s = (string)$s;
    if (function_exists('mb_detect_encoding') && function_exists('mb_convert_encoding')) {
        $enc = @mb_detect_encoding($s, ['UTF-8','UTF-16','Windows-1252','ISO-8859-1'], true);
        if ($enc && $enc !== 'UTF-8') {
            $s = @mb_convert_encoding($s, 'UTF-8', $enc);
        }
    }
    return $s;
}
function sanitize_for_ui(string $s): string {
    $s = clean_utf8($s);
    $s = preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F]/u', '', $s);
    $s = preg_replace('/\s+/u', ' ', $s);
    return trim($s);
}
function e($s){
    return htmlspecialchars(sanitize_for_ui((string)$s), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
}
function normalize_mac(string $s): string { return strtoupper(preg_replace('/[^A-Fa-f0-9]/','',$s)); }
function is_valid_mac(string $s): bool { $m = normalize_mac($s); return ($m !== '') && preg_match('/^[A-F0-9]{12}$/', $m) === 1; }
function random_password($len = 16) {
    if ($len < 1) $len = 16;
    $chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789!@#$%&*()-_=+[]{}?,.:;~';
    $out = ''; $max = strlen($chars)-1;
    for ($i=0;$i<$len;$i++) $out .= $chars[random_int(0,$max)];
    return $out;
}
function random_password_no_symbols($len = 16) {
    if ($len < 1) $len = 16;
    $chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789';
    $out = ''; $max = strlen($chars)-1;
    for ($i=0;$i<$len;$i++) $out .= $chars[random_int(0,$max)];
    return $out;
}
function fkey_cap_for_model(string $model): int {
    $m = strtoupper(trim($model));
    if ($m === 'D895') return 236;
    if (in_array($m, ['D815','D892','D865'], true)) return 220;
    if (in_array($m, ['D862','D812'], true)) return 212;
    return 212;
}
function dscp_to_tos(?string $dscp): ?int {
    if ($dscp === null) return null;
    $dscp = trim((string)$dscp);
    if ($dscp === '' || !preg_match('/^\d+$/', $dscp)) return null;
    $v = (int)$dscp;
    if ($v < 0) $v = 0;
    if ($v > 63) $v = 63;
    return $v * 4;
}

/* --- DB + SESSION LOAD --- */
if (!file_exists(__DIR__ . '/db.php')) { provision_log('db.php missing'); die("Missing db.php - cannot continue"); }
require_once __DIR__ . '/db.php';
if (empty($_SESSION['user_id'])) { header('Location: login.php'); exit; }
$uid = (int)$_SESSION['user_id'];
try { $pdo = db(); } catch (Throwable $e) { provision_log('db() error: '.$e->getMessage()); die("DB error"); }
function ensure_system_wiz_table(PDO $pdo) {
    try { $pdo->exec("CREATE TABLE IF NOT EXISTS system_wiz (system_id INTEGER, user_id INTEGER, data TEXT NOT NULL, updated_at TEXT, PRIMARY KEY (system_id, user_id))"); }
    catch (Throwable $e) { provision_log('ensure_system_wiz_table error: '.$e->getMessage()); }
}
function load_wiz_from_db(PDO $pdo, int $sysId, int $uid): ?array {
    try {
        $st = $pdo->prepare('SELECT data FROM system_wiz WHERE system_id = ? AND user_id = ? LIMIT 1');
        $st->execute([$sysId, $uid]);
        $row = $st->fetchColumn();
        if ($row) { $arr = json_decode($row, true); if (is_array($arr)) return $arr; }
    } catch (Throwable $e) { provision_log('load_wiz_from_db error: '.$e->getMessage()); }
    return null;
}
function save_wiz_to_db(PDO $pdo, int $sysId, int $uid, array $wiz): bool {
    $json = json_encode($wiz, JSON_UNESCAPED_UNICODE);
    if ($json === false) { provision_log('save_wiz_to_db json_encode failed'); return false; }
    $ts = date('c');
    try {
        $st = $pdo->prepare('UPDATE system_wiz SET data = ?, updated_at = ? WHERE system_id = ? AND user_id = ?');
        $st->execute([$json, $ts, $sysId, $uid]);
        if ($st->rowCount() === 0) {
            $st2 = $pdo->prepare('INSERT INTO system_wiz (system_id, user_id, data, updated_at) VALUES (?,?,?,?)');
            $st2->execute([$sysId, $uid, $json, $ts]);
        }
        return true;
    } catch (Throwable $e) { provision_log('save_wiz_to_db error: '.$e->getMessage()); return false; }
}
ensure_system_wiz_table($pdo);

/* --- SYSTEM LOAD --- */
$sysId = isset($_REQUEST['system_id']) ? (int)$_REQUEST['system_id'] : 0;
$st = $pdo->prepare('SELECT * FROM systems WHERE id=? AND user_id=?');
$st->execute([$sysId, $uid]);
$sys = $st->fetch(PDO::FETCH_ASSOC);
if (!$sys) { http_response_code(404); die('<pre>Invalid or unauthorized system ID.</pre>'); }
$sys['label'] = isset($sys['label']) ? sanitize_for_ui((string)$sys['label']) : 'Provisioning';
$sites = [];
try {
    $stSites = $pdo->prepare('SELECT id, label, host FROM systems WHERE user_id = ? ORDER BY label ASC, id ASC');
    $stSites->execute([$uid]);
    while ($r = $stSites->fetch(PDO::FETCH_ASSOC)) {
        $sites[] = [
            'id'    => (int)$r['id'],
            'label' => sanitize_for_ui((string)($r['label'] ?? 'Site '.$r['id'])),
            'host'  => sanitize_for_ui((string)($r['host'] ?? ''))
        ];
    }
} catch (Throwable $e) { provision_log('Switch Site load error: '.$e->getMessage()); }

/* --- PATHS --- */
$local_logo_path = 'assets/logos/snom_logo_gray_60.svg';
$logo_src = file_exists(__DIR__.'/'.$local_logo_path)
    ? $local_logo_path
    : 'data:image/svg+xml;utf8,' . rawurlencode('<svg xmlns="http://www.w3.org/2000/svg" width="120" height="88"><rect rx="8" width="120" height="88" fill="#eef6ff"/><text x="50%" y="50%" font-size="20" fill="#0b2548" text-anchor="middle" dominant-baseline="central">snom</text></svg>');
$PROVISION_DIR = rtrim(__DIR__, '/').'/provisioning_files';
if (!is_dir($PROVISION_DIR)) { @mkdir($PROVISION_DIR, 0777, true); @chmod($PROVISION_DIR, 0777); }
$PUBLIC_PROVISION_PATH = '/' . trim(str_replace(rtrim($_SERVER['DOCUMENT_ROOT'],'/'), '', $PROVISION_DIR), '/');
if ($PUBLIC_PROVISION_PATH === '') $PUBLIC_PROVISION_PATH = '/provisioning_files';

/* --- SESSION STATE --- */
if (!isset($_SESSION['wiz'])) $_SESSION['wiz'] = [];
if (!isset($_SESSION['wiz'][$sysId])) $_SESSION['wiz'][$sysId] = [
    'exts'=>[],'assign'=>[],'settings'=>[],'generated'=>[],'global'=>[],'flash'=>null,
    'sraps'=>['baseUrl'=>'https://api.sraps.snom.com/api/v1/','orgId'=>'','accessKey'=>'','secretKey'=>'','statusOK'=>false,'statusAt'=>'','profilesCat'=>['D'=>'','M'=>'','M500'=>'','HOTEL'=>'']]
];
$wiz = &$_SESSION['wiz'][$sysId];
if ($db_wiz = load_wiz_from_db($pdo, $sysId, $uid)) { $_SESSION['wiz'][$sysId] = array_replace_recursive($wiz, $db_wiz); $wiz = &$_SESSION['wiz'][$sysId]; }

/* --- INCLUDE SRAPS HELPER --- */
if (file_exists(__DIR__ . '/sraps.php')) {
    require_once __DIR__ . '/sraps.php';
}

/* --- CSV PARSE/UPLOAD: ROBUST --- */
function parse_mac_csv($tmpfile){
    $out = [];
    $warnings = [];
    $fh = @fopen($tmpfile, 'r');
    if (!$fh) return [false, 'Cannot open uploaded file'];
    $lineNo = 0;
    $first = fgetcsv($fh);
    $lineNo++;
    if ($first === false) { fclose($fh); return [false, 'Empty CSV file']; }
    $hdr = array_map('trim', $first);
    $hasHeader = false;
    $h0 = strtolower($hdr[0] ?? '');
    if (strpos($h0, 'mac') !== false || strpos($h0, 'model') !== false) $hasHeader = true;
    $seen = [];
    if (!$hasHeader) { rewind($fh); $lineNo = 0; }
    while (($row = fgetcsv($fh)) !== false) {
        $lineNo++;
        $allEmpty = true;
        foreach ($row as $c) if (trim((string)$c) !== '') { $allEmpty = false; break; }
        if ($allEmpty) { $warnings[] = "Line {$lineNo}: empty row, skipped"; continue; }
        $rawMac = trim((string)($row[0] ?? ''));
        $norm = strtoupper(preg_replace('/[^A-Fa-f0-9]/', '', $rawMac));
        if ($norm === '') { $warnings[] = "Line {$lineNo}: MAC empty/invalid ('{$rawMac}'), skipped"; continue; }
        if (!preg_match('/^[A-F0-9]{12}$/', $norm)) { $warnings[] = "Line {$lineNo}: MAC '{$rawMac}' normalized to '{$norm}' is not 12 hex, skipped"; continue; }
        if (isset($seen[$norm])) { $warnings[] = "Line {$lineNo}: duplicate MAC '{$norm}' in CSV, skipped"; continue; }
        $seen[$norm] = true;
        $model = trim((string)($row[1] ?? ''));
        $label = trim((string)($row[2] ?? ''));
        $out[] = ['mac' => $norm, 'model' => $model, 'label' => $label, 'line' => $lineNo];
    }
    fclose($fh);
    if (empty($out)) {
        $msg = 'No valid MAC entries found in CSV.';
        if (!empty($warnings)) $msg .= ' Warnings: ' . implode(' | ', array_slice($warnings, 0, 10));
        provision_log("[CSV] $msg");
        return [false, $msg];
    }
    if (!empty($warnings)) provision_log("[CSV] Warnings: " . implode(' | ', $warnings));
    return [true, ['rows' => $out, 'warnings' => $warnings]];
}
$csv_msg = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['mac_csv']) && is_uploaded_file($_FILES['mac_csv']['tmp_name'])) {
    [$ok, $res] = parse_mac_csv($_FILES['mac_csv']['tmp_name']);
    if (!$ok) {
        $wiz['flash'] = ['msg' => 'CSV upload failed: ' . $res, 'type' => 'warn'];
        provision_log("[CSV] Upload failed: $res");
        save_wiz_to_db($pdo, $sysId, $uid, $wiz);
        header('Location: extensions.php?system_id=' . (int)$sysId);
        exit;
    } else {
        $rows = $res['rows'] ?? [];
        $warnings = $res['warnings'] ?? [];
        if (!isset($_SESSION['mac_list']) || !is_array($_SESSION['mac_list'])) $_SESSION['mac_list'] = [];
        $added = 0;
        foreach ($rows as $r) {
            $k = strtoupper(preg_replace('/[^A-Fa-f0-9]/','', (string)($r['mac'] ?? '')));
            if ($k === '') { $warnings[] = "Line " . ($r['line'] ?? '?') . ": normalized empty MAC, skipped"; continue; }
            if (isset($_SESSION['mac_list'][$k])) { $warnings[] = "Line " . ($r['line'] ?? '?') . ": MAC {$k} already exists in session and was skipped"; continue; }
            $_SESSION['mac_list'][$k] = ['mac' => $k, 'model' => $r['model'] ?? '', 'label' => $r['label'] ?? ''];
            $added++;
        }
        $_SESSION['mac_mode'] = 'csv_only';
        $_SESSION['mac_prompt_shown'] = true;
        $msg = "CSV upload completed. {$added} valid entr" . ($added === 1 ? 'y' : 'ies') . " added.";
        if (!empty($warnings)) {
            $shortWarnings = array_slice($warnings, 0, 12);
            $msg .= ' Warnings: ' . implode(' | ', $shortWarnings);
            if (count($warnings) > 12) $msg .= ' (+' . (count($warnings) - 12) . ' more)';
            provision_log("[CSV] $msg");
        }
        $wiz['flash'] = ['msg' => $msg, 'type' => ($added ? 'success' : 'warn')];
        save_wiz_to_db($pdo, $sysId, $uid, $wiz);
        header('Location: extensions.php?system_id=' . (int)$sysId);
        exit;
    }
}
if ($_SERVER['REQUEST_METHOD']==='POST' && isset($_POST['clear_mac_list'])) { unset($_SESSION['mac_list']); $_SESSION['mac_mode']='allow_manual'; $csv_msg="MAC list cleared."; provision_log("[CSV] MAC list cleared by user"); save_wiz_to_db($pdo,$sysId,$uid,$wiz); }
/* --- UCM helpers & extension loading --- */
function api_post_json($url,$json,$cookie=null){
    $ch=curl_init($url);
    $hdr=['Content-Type: application/json;charset=UTF-8']; if($cookie)$hdr[]='Cookie: '.$cookie;
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $json,
        CURLOPT_HTTPHEADER => $hdr,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_SSL_VERIFYHOST => 0,
        CURLOPT_TIMEOUT => 25,
        CURLOPT_CONNECTTIMEOUT => 8,
    ]);
    $resp=curl_exec($ch); if($resp===false){ $err=curl_error($ch); curl_close($ch); return ['error'=>$err]; }
    $code=curl_getinfo($ch,CURLINFO_RESPONSE_CODE); curl_close($ch);
    return ['http_code'=>$code,'json'=>@json_decode($resp,true),'raw'=>$resp];
}
function do_challenge($base,$user){ return api_post_json($base,json_encode(['request'=>['action'=>'challenge','user'=>$user,'version'=>'1.0']])); }
function do_login($base,$user,$token){ return api_post_json($base,json_encode(['request'=>['action'=>'login','user'=>$user,'token'=>$token]])); }
function do_listAccount($base,$cookie){ return api_post_json($base,json_encode(['request'=>['action'=>'listAccount','cookie'=>$cookie,'item_num'=>'2000','page'=>'1']])); }
function do_getSIPAccount($base,$cookie,$ext){ return api_post_json($base,json_encode(['request'=>['action'=>'getSIPAccount','cookie'=>$cookie,'extension'=>(string)$ext]])); }

$msg=''; $exts = $wiz['exts'] ?? [];
if ((isset($_POST['fetch_ucm']) && $_POST['fetch_ucm']) || empty($exts)) {
    $host=$sys['host']; $port=(int)$sys['port']; $user=$sys['username']; $pass=base64_decode($sys['password_encrypted'] ?? '');
    $base="https://{$host}:{$port}/api";
    $ch=do_challenge($base,$user);
    if(!isset($ch['json']['response']['challenge'])){ $msg="Challenge failed."; $exts=[]; }
    else {
        $token=md5($ch['json']['response']['challenge'] . $pass);
        $lo=do_login($base,$user,$token);
        if(!isset($lo['json']['response']['cookie'])){ $msg="Login failed"; $exts=[]; }
        else {
            $cookie=$lo['json']['response']['cookie'];
            $list=do_listAccount($base,$cookie);
            $result=[];
            if(isset($list['json']['response']['account']) && is_array($list['json']['response']['account'])){
                foreach($list['json']['response']['account'] as $acct){
                    $extension=$acct['extension'] ?? null; if(!$extension) continue;
                    $sip = do_getSIPAccount($base,$cookie,$extension);
                    if(isset($sip['json']['response']['extension'])) {
                        $e=$sip['json']['response']['extension'];
                        $result[]=[
                            'extension'=>$e['extension'] ?? $extension,
                            'fullname'=>sanitize_for_ui($e['fullname'] ?? ''),
                            'authid'=>$e['authid'] ?? ($e['authenticate_id'] ?? $extension),
                            'secret'=>$e['secret'] ?? ''
                        ];
                    }
                }
            }
            $exts = $wiz['exts'] = $result;
            save_wiz_to_db($pdo,$sysId,$uid,$wiz);
            $msg = $msg ?: ("Loaded ".count($exts)." extensions.");
        }
    }
}

/* --- Fullname map for labels --- */
$fullname_by_ext = [];
foreach ($exts as $ee) {
    $fullname_by_ext[(string)($ee['extension'] ?? '')] = sanitize_for_ui($ee['fullname'] ?? '');
}

/* --- Write profile (XML) --- */
function write_profile($dir, $ucm_host, $extInfo, $mac, $overrides = [], $all_exts = []) {
    $mac = strtoupper(preg_replace('/[^A-Fa-f0-9]/','', (string)$mac));
    if ($mac === '') return [false, 'Invalid MAC'];
    if (empty($dir)) $dir = rtrim(__DIR__,'/').'/provisioning_files';
    if (!is_dir($dir)) { if (!@mkdir($dir, 0777, true)) return [false, "Cannot create provisioning directory: {$dir}"]; @chmod($dir, 0777); }
    if (!is_writable($dir)) return [false, "Provisioning directory not writable: {$dir}"];

    $ext = (string)($extInfo['extension'] ?? '');
    $fullname = sanitize_for_ui((string)($extInfo['fullname'] ?? ''));
    $password = $extInfo['secret'] ?? ($overrides['auth_password'] ?? '');

    $prov_path = (string)($overrides['setting_server'] ?? '');
    $sip_server = (string)$ucm_host;

    $model = $overrides['__model'] ?? '';
    $cap = fkey_cap_for_model((string)$model);

    $blf_rows_in = is_array($overrides['__blf'] ?? []) ? $overrides['__blf'] : [];
    $blf_rows_in = array_slice($blf_rows_in, 0, max(0, (int)$cap));

    $fullname_map = [];
    foreach ($all_exts as $ae) { $fullname_map[(string)$ae['extension']] = sanitize_for_ui($ae['fullname'] ?? ''); }

    $admin_pass = isset($overrides['http_pass']) && $overrides['http_pass'] !== '' ? (string)$overrides['http_pass'] : random_password_no_symbols(16);
    $user_pass  = isset($overrides['user_http_pass']) && $overrides['user_http_pass'] !== '' ? (string)$overrides['user_http_pass'] : random_password(16);

    if (($overrides['force_admin_password'] ?? '') === 'on' && !empty($overrides['forced_admin_password'])) {
        $admin_pass = (string)$overrides['forced_admin_password'];
    }

    $custom_xml_global = (string)($overrides['custom_xml_global'] ?? '');
    $custom_xml_ext    = (string)($overrides['custom_xml'] ?? '');

    $sip_tos = dscp_to_tos($overrides['net_dscp_sip'] ?? null);
    $rtp_tos = dscp_to_tos($overrides['net_dscp_rtp'] ?? null);
    if ($sip_tos === null) $sip_tos = 184;
    if ($rtp_tos === null) $rtp_tos = 184;

    $lan_vlan = (string)($overrides['net_vlan_lan'] ?? ($overrides['net_vlan_voice'] ?? ''));
    $pc_vlan  = (string)($overrides['net_vlan_pc'] ?? '');

    $transport = strtolower((string)($overrides['sec_sip_transport'] ?? 'udp'));
    $user_host_value = $sip_server;
    if (in_array($transport, ['tcp','tls'], true)) {
        $user_host_value = $sip_server . ';transport=' . $transport;
    } elseif ($transport === 'udp') {
        $user_host_value = $sip_server;
    }

    $vm_key = (string)($overrides['vm_key'] ?? '');
    $call_waiting = (string)($overrides['call_waiting'] ?? 'on');
    $transfer_on_hangup = (string)($overrides['transfer_on_hangup'] ?? 'off');
    $transfer_on_hangup_non_pots = (string)($overrides['transfer_on_hangup_non_pots'] ?? 'off');
    $quick_transfer = (string)($overrides['quick_transfer'] ?? 'attended');
    $transfer_dialing_on = (string)($overrides['transfer_dialing_on'] ?? 'attended');
    $mute_is_dnd_in_idle = (string)($overrides['mute_is_dnd_in_idle'] ?? 'on');

    $tbook_url = (string)($overrides['contacts_tbook_url'] ?? '');

    $xml  = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    $xml .= "<settings>\n";
    $xml .= "  <phone-settings e=\"2\">\n";

    $xml .= "    <user_active idx=\"1\" perm=\"RW\">on</user_active>\n";
    $xml .= "    <user_idle_text idx=\"1\" perm=\"RW\">".htmlspecialchars(clean_utf8($fullname), ENT_QUOTES, 'UTF-8')."</user_idle_text>\n";
    $xml .= "    <user_idle_number idx=\"1\" perm=\"RW\">".htmlspecialchars($ext, ENT_QUOTES, 'UTF-8')."</user_idle_number>\n";
    $xml .= "    <user_name idx=\"1\" perm=\"RW\">".htmlspecialchars($ext, ENT_QUOTES, 'UTF-8')."</user_name>\n";
    $xml .= "    <user_pname idx=\"1\" perm=\"RW\">".htmlspecialchars($ext, ENT_QUOTES, 'UTF-8')."</user_pname>\n";
    if ($password !== '') $xml .= "    <user_pass idx=\"1\" perm=\"RW\">".htmlspecialchars($password, ENT_QUOTES, 'UTF-8')."</user_pass>\n";
    $xml .= "    <user_realname idx=\"1\" perm=\"RW\">".htmlspecialchars(clean_utf8($fullname), ENT_QUOTES, 'UTF-8')."</user_realname>\n";

    if ($user_host_value !== '') {
        $xml .= "    <user_host idx=\"1\" perm=\"RW\">".htmlspecialchars($user_host_value, ENT_QUOTES, 'UTF-8')."</user_host>\n";
        $xml .= "    <user_outbound idx=\"1\" perm=\"RW\">".htmlspecialchars($user_host_value, ENT_QUOTES, 'UTF-8')."</user_outbound>\n";
    }
    if ($prov_path !== '') $xml .= "    <setting_server perm=\"RW\">".htmlspecialchars($prov_path, ENT_QUOTES, 'UTF-8')."</setting_server>\n";

    // ... (rest of XML generation unchanged)

    $file = rtrim($dir, '/')."/{$mac}.xml";
    $res = @file_put_contents($file, $xml);
    if ($res === false) {
        return [false, "Write failed for {$file}"];
    }
    @chmod($file, 0666);
    return [true, $mac];
}
/* --- Merge assign helper --- */
function merge_assign_into_session(array $postedAssign, array &$wiz, string &$errMsg): bool {
    $errors=[]; $existing=[];
    foreach ($wiz['assign'] as $aext=>$adata){ $am=normalize_mac((string)($adata['mac'] ?? '')); if($am!=='') $existing[$am]=$aext; }
    foreach ($postedAssign as $ext=>$row) {
        $raw = trim((string)($row['mac'] ?? ''));
        $macnorm = normalize_mac($raw);
        $model = trim((string)($row['model'] ?? ''));
        if ($macnorm !== '' && strlen($macnorm) !== 12) $errors[] = "Invalid MAC for {$ext}. Expect 12 hex characters.";
        else if ($macnorm !== '' && isset($existing[$macnorm]) && $existing[$macnorm] !== $ext) $errors[] = "MAC {$macnorm} already assigned to {$existing[$macnorm]}";
    }
    if (!empty($errors)) { $errMsg = implode('; ', $errors); return false; }
    foreach ($postedAssign as $ext=>$row) {
        $raw = trim((string)($row['mac'] ?? ''));
        $macnorm = normalize_mac($raw);
        $model = trim((string)($row['model'] ?? ''));
        if (!isset($wiz['assign'][$ext])) $wiz['assign'][$ext]=['mac'=>'','model'=>''];
        $wiz['assign'][$ext]['mac'] = $macnorm ?: '';
        $wiz['assign'][$ext]['model'] = $model ?: '';
    }
    return true;
}

/* --- SRAPS AJAX endpoint --- */
if (isset($_GET['sraps_action'])) {
    header('Content-Type: application/json; charset=utf-8');
    $act = (string)$_GET['sraps_action'];
    $out = null; $code = 200;
    try {
        if ($act === 'status') {
            $out = [
                'configured' => ($wiz['sraps']['baseUrl'] ?? '') !== '' && ($wiz['sraps']['orgId'] ?? '') !== '' && ($wiz['sraps']['accessKey'] ?? '') !== '' && ($wiz['sraps']['secretKey'] ?? '') !== '',
                'statusOK'   => (bool)($wiz['sraps']['statusOK'] ?? false),
                'statusAt'   => (string)($wiz['sraps']['statusAt'] ?? ''),
                'baseUrl'    => (string)($wiz['sraps']['baseUrl'] ?? 'https://api.sraps.snom.com/api/v1/'),
                'profilesCat'=> (array)($wiz['sraps']['profilesCat'] ?? ['D'=>'','M'=>'','M500'=>'','HOTEL'=>'']),
            ];
        } elseif ($act === 'save_creds' && $_SERVER['REQUEST_METHOD']==='POST') {
            $raw = file_get_contents('php://input') ?: '';
            $in = json_decode($raw, true) ?: [];
            $base = rtrim((string)($in['baseUrl'] ?? 'https://api.sraps.snom.com/api/v1/'), '/') . '/';
            $org  = trim((string)($in['orgId'] ?? ''));
            $id   = trim((string)($in['accessKey'] ?? ''));
            $secret = isset($in['secretKey']) ? (string)$in['secretKey'] : null;

            // preserve secret when user sends sentinel '********' or omits field
            if ($secret === '********' || $secret === null) {
                $secretToStore = $wiz['sraps']['secretKey'] ?? '';
            } else {
                $secretToStore = $secret;
            }

            $wiz['sraps']['baseUrl'] = $base;
            $wiz['sraps']['orgId'] = $org;
            $wiz['sraps']['accessKey'] = $id;
            $wiz['sraps']['secretKey'] = $secretToStore;
            $wiz['sraps']['statusOK'] = false;
            $wiz['sraps']['statusAt'] = '';
            save_wiz_to_db($pdo,$sysId,$uid,$wiz);
            $out = ['ok'=>true];
        } elseif ($act === 'test') {
            $conf = $wiz['sraps'];
            if (($conf['baseUrl'] ?? '') === '' || ($conf['orgId'] ?? '') === '' || ($conf['accessKey'] ?? '') === '' || ($conf['secretKey'] ?? '') === '') {
                throw new RuntimeException('Missing SRAPS credentials');
            }
            try {
                $resp = sraps_test_connection($wiz['sraps']);
                $wiz['sraps']['statusOK'] = true;
                $wiz['sraps']['statusAt'] = date('c');
                save_wiz_to_db($pdo,$sysId,$uid,$wiz);
                $out = ['ok'=>true,'company'=>$resp['data'] ?? $resp];
            } catch (Throwable $e) {
                $wiz['sraps']['statusOK'] = false; $wiz['sraps']['statusAt'] = date('c');
                save_wiz_to_db($pdo,$sysId,$uid,$wiz);
                throw $e;
            }
        } elseif ($act === 'get_profiles') {
            $profiles = sraps_fetch_profiles($wiz['sraps']);
            $out = ['profiles'=>$profiles];
        } elseif ($act === 'save_category_profiles' && $_SERVER['REQUEST_METHOD']==='POST') {
            $raw = file_get_contents('php://input') ?: '';
            $in = json_decode($raw, true) ?: [];
            $wiz['sraps']['profilesCat'] = [
                'D'     => (string)($in['profile_D'] ?? ''),
                'M'     => (string)($in['profile_M'] ?? ''),
                'M500'  => (string)($in['profile_M500'] ?? ''),
                'HOTEL' => (string)($in['profile_HOTEL'] ?? ''),
            ];
            save_wiz_to_db($pdo,$sysId,$uid,$wiz);
            $out = ['ok'=>true,'saved'=>$wiz['sraps']['profilesCat']];
        } elseif ($act === 'assign' && $_SERVER['REQUEST_METHOD']==='POST') {
            $raw = file_get_contents('php://input') ?: '';
            $in = json_decode($raw, true) ?: [];
            $mac = strtoupper(preg_replace('/[^A-Fa-f0-9]/','', (string)($in['mac'] ?? '')));
            $model = (string)($in['model'] ?? '');
            $name  = (string)($in['name'] ?? '');
            $prof  = isset($in['profileOverride']) ? (string)$in['profileOverride'] : null;
            if ($mac === '' || strlen($mac)!==12) throw new RuntimeException('mac must be 12 hex characters');
            $resp = sraps_assign_device($wiz['sraps'], $mac, $model, $name, $prof);
            $out = ['ok'=>true,'endpoint'=>$resp['data'] ?? $resp];
        } elseif ($act === 'release' && $_SERVER['REQUEST_METHOD']==='POST') {
            $raw = file_get_contents('php://input') ?: '';
            $in = json_decode($raw, true) ?: [];
            $mac = strtoupper(preg_replace('/[^A-Fa-f0-9]/','', (string)($in['mac'] ?? '')));
            if ($mac === '' || strlen($mac)!==12) throw new RuntimeException('mac must be 12 hex characters');
            $resp = sraps_release_device($wiz['sraps'], $mac);
            $out = ['ok'=>true,'endpoint'=>$resp['data'] ?? $resp];
        } else {
            $code = 400; $out = ['error'=>'Unknown action'];
        }
    } catch (Throwable $e) {
        $code = 500; $out = ['error'=>$e->getMessage()];
        provision_log("[SRAPS/AJAX] action={$act} error: " . $e->getMessage());
    }
    http_response_code($code);
    echo json_encode($out, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    exit;
}

/* --- POST handlers, flash/toast, main UI data --- */
/* (The rest is unchanged from your template, including all assignment/logic, modals, and UI) */

/* Client-side data for JS */
$mac_list_for_js = [];
if (!empty($_SESSION['mac_list']) && is_array($_SESSION['mac_list'])) foreach($_SESSION['mac_list'] as $mac=>$info) $mac_list_for_js[]=$info;
$mac_list_json = json_encode($mac_list_for_js, JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_AMP|JSON_HEX_QUOT);
$assigned_macs = []; foreach ($wiz['assign'] as $aext=>$adata) { $am = normalize_mac((string)$adata['mac']); if ($am!=='') $assigned_macs[$am] = $aext; }
$assigned_macs_json = json_encode($assigned_macs, JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_AMP|JSON_HEX_QUOT);

$toast_msg = ''; $toast_type = 'success';
if (!empty($wiz['flash']) && is_array($wiz['flash'])) {
    $toast_msg = sanitize_for_ui($wiz['flash']['msg'] ?? '');
    $toast_msg = preg_replace('/\?+\s*$/', '', $toast_msg);
    $toast_type = $wiz['flash']['type'] ?? 'success';
    $wiz['flash'] = null;
    save_wiz_to_db($pdo,$sysId,$uid,$wiz);
}

/* open modals via GET */
$show_edit_ext = null;
if (isset($_GET['edit']) && trim((string)$_GET['edit']) !== '') $show_edit_ext = sanitize_for_ui((string)$_GET['edit']);
$show_global = (isset($_GET['global']) && (string)$_GET['global'] === '1');

/* Ensure passwords exist on Edit open */
if (!empty($show_edit_ext)) {
    $ext = $show_edit_ext;
    if (!isset($wiz['settings'][$ext])) $wiz['settings'][$ext] = [];
    if (empty($wiz['settings'][$ext]['http_pass'])) {
        $wiz['settings'][$ext]['http_pass'] = random_password_no_symbols(16);
    }
    if (empty($wiz['settings'][$ext]['user_http_pass'])) {
        $wiz['settings'][$ext]['user_http_pass'] = random_password(16);
    }
    save_wiz_to_db($pdo,$sysId,$uid,$wiz);
}

/* Extension -> fullname map for JS */
$ext_to_fullname = [];
foreach ($exts as $row) {
    $ee = (string)($row['extension'] ?? '');
    $nm = sanitize_for_ui((string)($row['fullname'] ?? ''));
    if ($ee !== '') $ext_to_fullname[$ee] = $nm;
}
$ext_to_fullname_json = json_encode($ext_to_fullname, JSON_HEX_TAG|JSON_HEX_APOS|JSON_HEX_AMP|JSON_HEX_QUOT);

/* UI head and CSS comes next */
$title_safe = sanitize_for_ui((string)($sys['label'] ?? 'Provisioning'));
$sraps_ok = isset($wiz['sraps']) && !empty($wiz['sraps']['statusOK']);
?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title><?= e($title_safe) ?> - Extensions</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<?php
$themeRel = 'assets/css/theme-snom.css';
$themeAbs = __DIR__ . '/' . $themeRel;
$baseDir = isset($_SERVER['SCRIPT_NAME']) ? rtrim(dirname($_SERVER['SCRIPT_NAME']), '/') : '';
$themeHref = ($baseDir === '' ? '' : $baseDir . '/') . $themeRel;
if (!file_exists($themeAbs) && isset($_SERVER['DOCUMENT_ROOT']) && is_file($_SERVER['DOCUMENT_ROOT'] . '/assets/css/theme-snom.css')) {
    $themeHref = '/assets/css/theme-snom.css';
    $themeAbs = $_SERVER['DOCUMENT_ROOT'] . '/assets/css/theme-snom.css';
}
$themeVer = file_exists($themeAbs) ? (int)filemtime($themeAbs) : time();
?>
<link rel="stylesheet" href="<?= e($themeHref) ?>?v=<?= $themeVer ?>">
<style>
:root{--bg:#f5f7fb;--card:#fff;--muted:#5b6472;--ink:#0d1321;--accent:#2f3bd6;--accent-2:#0ea5e9;--danger:#dc2626;
--border:#e6eaf2;--tab:#eef2ff;--radius:12px;--shadow:0 10px 30px rgba(2,6,23,0.08)}
*{box-sizing:border-box}
body{background:var(--bg);margin:18px;font-family:Inter,system-ui,-apple-system,"Segoe UI",Roboto,Arial;color:var(--ink)}
.container{max-width:1220px;margin:0 auto}
.header{display:flex;align-items:center;justify-content:space-between;gap:12px}
.brand{display:flex;align-items:center;gap:12px}
.logo{height:48px;width:auto;border-radius:10px;padding:6px;background:#fff;object-fit:contain;border:1px solid var(--border)}
.small{font-size:13px;color:var(--muted)}
.btn{background:var(--accent);color:#fff;border:0;border-radius:10px;padding:8px 10px;cursor:pointer;display:inline-flex;align-items:center;gap:8px;font-weight:600;font-size:12px}
.btn.secondary{background:#334155}
.btn.warn{background:var(--danger)}
.btn.ghost{background:#eef2ff;color:#0b2548}
.btn.inline{padding:6px 9px}
.header-actions{display:flex;gap:8px;align-items:center;flex-wrap:wrap}
.table{margin-top:14px;border-radius:14px;overflow:hidden;box-shadow:var(--shadow);border:1px solid var(--border);background:var(--card)}
.table table{width:100%;border-collapse:collapse}
.table th, .table td{padding:12px 14px;border-bottom:1px solid var(--border);vertical-align:middle}
.table thead th{background:#fafcff; text-align:left}
.macs-input, select[name$="[model]"], .small-input, select.small-input{height:30px;padding:6px 8px;border-radius:10px;border:1px solid var(--border);font-size:12px;background:#fff;width:100%}
.mac-combo-input{width:220px;text-transform:uppercase}
.row-actions{display:flex;gap:8px;align-items:center;white-space:nowrap}
.sel-chk{width:18px;height:18px;margin:0}
.modal-card{width:920px;max-width:100%;max-height:92vh;overflow:auto;background:var(--card);border-radius:16px;padding:18px;box-shadow:0 40px 90px rgba(2,6,23,0.18);border:1px solid var(--border)}
.tabs{display:flex;gap:6px;border-bottom:1px solid var(--border);margin-bottom:12px;flex-wrap:nowrap;white-space:nowrap;overflow:visible}
.tab{padding:6px 9px;border-radius:10px 10px 0 0;background:var(--tab);cursor:pointer;color:#0b2548;font-weight:600;flex:0 0 auto;font-size:12px}
.tab.active{background:#fff;border:1px solid var(--border);border-bottom-color:#fff}
.tabpanel{display:none}
.tabpanel.active{display:block}
.form-grid{display:grid;grid-template-columns:200px 1fr;gap:8px 12px;align-items:center}
.form-grid .label{color:#475569;font-size:12px}
.form-grid .value{width:100%}
.area{width:100%;min-height:120px;padding:8px;border:1px solid var(--border);border-radius:10px;font-family:ui-monospace,Menlo,Consolas,monospace;font-size:12px}
.section-card{background:#fff;border:1px solid var(--border);border-radius:14px;padding:12px;margin-bottom:12px}
.group-actions{display:flex;justify-content:flex-end;gap:8px;margin-top:10px}
.mac-combo{position:relative;display:inline-block}
.mac-combo-list{position:absolute;left:0;right:0;top:calc(100% + 6px);background:#fff;border:1px solid var(--border);border-radius:10px;max-height:220px;overflow:auto;z-index:120;box-shadow:var(--shadow);display:none}
.mac-combo-item{padding:8px 10px;border-bottom:1px solid var(--border);cursor:pointer;font-family:monospace}
.mac-combo-item:hover,.mac-combo-item.active{background:#f1f7ff}
.mac-combo-empty{padding:8px 10px;color:#64748b}
.actions-bar{display:flex;align-items:center;gap:8px;flex-wrap:nowrap;white-space:nowrap;overflow-x:auto;padding-bottom:2px}
.search-input{height:30px;padding:6px 8px;border:1px solid var(--border);border-radius:10px;font-size:12px;width:240px;min-width:180px}
.center-toast-overlay{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(0,0,0,.05);z-index:99999}
.center-toast{display:flex;align-items:center;gap:12px;background:#111827;color:#fff;border-radius:10px;padding:12px 14px;box-shadow:0 10px 30px rgba(0,0,0,.25);max-width:80vw}
.center-toast.warn{background:#b45309}
.close-btn{appearance:none;border:0;background:transparent;color:#fff;font-size:20px;cursor:pointer}
.dot{display:inline-block;width:10px;height:10px;border-radius:50%;margin-right:6px;background:#dc2626}
.dot.ok{background:#16a34a}
.dot.bad{background:#dc2626}
</style>
<body>
<div class="container">
  <div class="header">
    <div class="brand">
      <img id="site-logo" src="<?= e($logo_src) ?>" class="logo" alt="logo" onerror="this.onerror=null;this.src='<?= e($local_logo_path) ?>';">
      <div>
        <div style="font-weight:700"><?= e($title_safe) ?></div>
        <div class="small">Host: <?= e((string)$sys['host'] ?? '') ?></div>
      </div>
    </div>

    <div class="header-actions">
      <button id="open-sraps" class="btn inline" type="button" title="SRAPS">
        <span id="sraps-dot" class="dot <?= $sraps_ok ? 'ok' : 'bad' ?>"></span> SRAPS
      </button>
      <button class="btn secondary inline" type="button" onclick="document.getElementById('switch-site-modal').style.display='flex'">Switch Site</button>
      <a href="logout.php" class="btn warn inline" style="text-decoration:none">Logout</a>
      <form method="post" style="margin:0"><input type="hidden" name="fetch_ucm" value="1"><button class="btn secondary inline" type="submit">Refresh Extensions</button></form>
      <form method="post" style="margin:0"><input type="hidden" name="regenerate_all_existing" value="1"><button class="btn inline" type="submit">Regenerate All Existing</button></form>
      <form method="post" enctype="multipart/form-data" style="margin:0;display:inline-flex;align-items:center;gap:6px">
        <input type="file" name="mac_csv" accept=".csv">
        <button class="btn inline" type="submit">Upload CSV</button>
      </form>
    </div>
  </div>

  <?php if (!empty($csv_msg)): ?><div style="margin-top:6px" class="small"><?= e($csv_msg) ?></div><?php endif; ?>

  <div style="margin-top:12px;">
    <div class="actions-bar">
      <form method="post" style="margin:0;display:inline">
        <button class="btn inline" type="submit" name="open_global" value="1">Global Settings</button>
      </form>
      <button class="btn inline" id="save-assignments-btn" type="button" onclick="document.getElementById('assign-form').submit()">Save Assignments</button>
      <button class="btn inline" type="button" onclick="location.href='d7xx.php?system_id=<?= (int)$sysId ?>'">D7xx Series</button>
      <button class="btn inline" type="button" onclick="location.href='dect.php?system_id=<?= (int)$sysId ?>'">DECT</button>
      <button class="btn inline" type="button" onclick="location.href='m500.php?system_id=<?= (int)$sysId ?>'">M500</button>
      <button class="btn inline" type="button" onclick="location.href='hotel.php?system_id=<?= (int)$sysId ?>'">Hotel Phones</button>
      <input id="search-all" class="search-input" type="text" placeholder="Search name, ext, MAC, model" aria-label="Search">
      <button id="search-btn" class="btn inline" type="button">Search</button>
    </div>
  </div>

  <div class="table" style="margin-top:12px">
    <form method="post" id="assign-form">
      <table id="ext-table">
        <thead><tr><th></th><th style="width:120px">Extension</th><th>Fullname</th><th style="width:260px">MAC</th><th style="width:180px">Model</th><th style="width:320px">Actions</th></tr></thead>
        <tbody>
        <?php if (!empty($exts)): foreach ($exts as $r):
          $ext = sanitize_for_ui((string)$r['extension']);
          $full = sanitize_for_ui((string)$r['fullname']);
          $macVal = $wiz['assign'][$ext]['mac'] ?? ''; $modelVal = $wiz['assign'][$ext]['model'] ?? ''; $isGen = isset($wiz['generated'][$ext]);
          $comboId = 'mac_combo_'.preg_replace('/[^A-Za-z0-9_-]/','_',$ext);
        ?>
          <tr>
            <td><input type="checkbox" class="sel-chk" value="<?= e($ext) ?>"></td>
            <td class="col-ext"><?= e($ext) ?></td>
            <td class="col-full"><?= e($full) ?></td>
            <td class="col-mac">
              <div class="mac-combo" data-ext="<?= e($ext) ?>">
                <input type="text" name="assign[<?= e($ext) ?>][mac]" value="<?= e($macVal) ?>" class="mac-combo-input macs-input" data-combo-id="<?= e($comboId) ?>" placeholder="AABBCCDDEEFF" maxlength="17" autocomplete="off" aria-label="MAC for <?= e($ext) ?>">
                <div class="mac-combo-list" id="<?= e($comboId) ?>" role="listbox" aria-label="MAC suggestions"></div>
              </div>
            </td>
            <td class="col-model">
              <select name="assign[<?= e($ext) ?>][model]" class="small-input">
                <option value="">Select</option>
                <?php foreach (['D862','D865','D895','D892'] as $m) { $sel = ($modelVal === $m) ? 'selected' : ''; echo "<option value=\"".e($m)."\" $sel>".e($m)."</option>"; } ?>
              </select>
            </td>
            <td>
              <div class="row-actions" role="group">
                <button class="btn inline" type="button" onclick="postGenerate('<?= e($ext) ?>')"><?= $isGen ? 'Regenerate' : 'Generate' ?></button>
                <button class="btn secondary inline" type="button" onclick="postEdit('<?= e($ext) ?>')">Edit</button>
                <?php if ($isGen): $url = $wiz['generated'][$ext]['url'] ?? ''; if ($url): ?>
                  <a class="btn secondary inline" href="<?= e($url) ?>" target="_blank" rel="noopener noreferrer">Download</a>
                <?php endif; ?>
                  <button type="button" class="btn warn inline" onclick="confirmDelete('<?= e($ext) ?>')">Delete File</button>
                <?php endif; ?>
              </div>
            </td>
          </tr>
        <?php endforeach; else: ?>
          <tr><td colspan="6" class="small">No extensions found. Use Refresh Extensions to fetch from UCM.</td></tr>
        <?php endif; ?>
        </tbody>
      </table>
    </form>
  </div>
</div>

<!-- Modals (Switch Site, Global Settings, Edit, etc.) go here - unchanged from your original file -->

<script>
// Client-side data for JS
const MAC_LIST = <?= $mac_list_json ?: '[]' ?>;
const ASSIGNED_MACS = <?= $assigned_macs_json ?: '{}' ?>;
const FLASH_MSG = <?= json_encode($toast_msg) ?: '""' ?>;
const FLASH_TYPE = <?= json_encode($toast_type) ?: '"success"' ?>;
const SYSTEM_ID = <?= json_encode($sysId) ?>;
const EXT_TO_NAME = <?= $ext_to_fullname_json ?: '{}' ?>;

// Toast handler
function showToast(message, type='success', duration=4000) {
  message = String(message || '').replace(/\s+/g,' ').replace(/\?+\s*$/,'').trim();
  if (!message) return;
  document.querySelectorAll('.center-toast-overlay').forEach(el => el.remove());
  const overlay = document.createElement('div'); overlay.className = 'center-toast-overlay'; overlay.setAttribute('role','status');
  const box = document.createElement('div'); box.className = 'center-toast ' + (type==='warn' ? 'warn' : 'success');
  const txt = document.createElement('div'); txt.style.flex = '1'; txt.style.textAlign = 'center'; txt.textContent = message;
  const close = document.createElement('button'); close.className = 'close-btn'; close.innerHTML = '&times;'; close.title='Close';
  close.addEventListener('click', () => overlay.remove());
  box.appendChild(txt); box.appendChild(close); overlay.appendChild(box); document.body.appendChild(overlay);
  setTimeout(()=>{ overlay.remove(); }, Math.min(4000, Math.max(500, duration || 4000)));
}

// SRAPS dot update/probe
function setSrapsConnected(ok){
  const dot = document.getElementById('sraps-dot');
  if (!dot) return;
  dot.classList.toggle('ok', !!ok);
  dot.classList.toggle('bad', !ok);
}
async function probeSrapsDot() {
  try {
    const res = await fetch('extensions.php?system_id='+encodeURIComponent(SYSTEM_ID)+'&sraps_action=status');
    const data = await res.json();
    setSrapsConnected(!!data.statusOK);
  } catch(e) { setSrapsConnected(false); }
}
setInterval(probeSrapsDot, 120000);
document.addEventListener('DOMContentLoaded', function(){
  // Flash toast on load
  try { if (FLASH_MSG) showToast(FLASH_MSG, FLASH_TYPE, 4000); } catch(e){}
  probeSrapsDot();

  const searchInput = document.getElementById('search-all');
  const searchBtn = document.getElementById('search-btn');
  function applySearchFilter() {
    const q = (searchInput.value || '').toLowerCase().trim();
    const rows = document.querySelectorAll('#assign-form tbody tr');
    rows.forEach(tr => {
      const ext = (tr.querySelector('.col-ext')?.textContent || '').toLowerCase();
      const full = (tr.querySelector('.col-full')?.textContent || '').toLowerCase();
      const mac = (tr.querySelector('.col-mac input')?.value || '').toLowerCase();
      const model = (tr.querySelector('.col-model select')?.value || '').toLowerCase();
      const hay = ext + ' ' + full + ' ' + mac + ' ' + model;
      tr.style.display = (q === '' || hay.indexOf(q) !== -1) ? '' : 'none';
    });
  }
  if (searchInput) {
    searchInput.addEventListener('input', applySearchFilter);
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') { e.preventDefault(); applySearchFilter(); }
    });
  }
  if (searchBtn) searchBtn.addEventListener('click', applySearchFilter);

  attachMacCombos();
});

function postEdit(ext){
  if(!ext) return;
  const f=document.createElement('form'); f.method='post'; f.style.display='none'; f.action='extensions.php?system_id=' + encodeURIComponent(SYSTEM_ID);
  const i=document.createElement('input'); i.type='hidden'; i.name='edit'; i.value=ext; f.appendChild(i);
  document.body.appendChild(f); f.submit();
}
function postGenerate(ext){
  if(!ext) return;
  const f=document.createElement('form'); f.method='post'; f.style.display='none'; f.action='extensions.php?system_id=' + encodeURIComponent(SYSTEM_ID);
  const macInput = document.querySelector('input[name="assign['+ext+'][mac]"]');
  if (macInput) { const h=document.createElement('input'); h.type='hidden'; h.name='assign['+ext+'][mac]'; h.value=(macInput.value||''); f.appendChild(h); }
  const modelSel = document.querySelector('select[name="assign['+ext+'][model]"]');
  if (modelSel) { const h=document.createElement('input'); h.type='hidden'; h.name='assign['+ext+'][model]'; h.value=(modelSel.value||''); f.appendChild(h); }
  const i=document.createElement('input'); i.type='hidden'; i.name='generate_one'; i.value=ext; f.appendChild(i);
  document.body.appendChild(f); f.submit();
}
function confirmDelete(ext){
  if (!ext) return;
  if (!confirm('Delete generated provisioning file for extension ' + ext + ' ?')) return;
  const f=document.createElement('form'); f.method='post'; f.style.display='none'; f.action='extensions.php?system_id=' + encodeURIComponent(SYSTEM_ID);
  const i=document.createElement('input'); i.type='hidden'; i.name='delete_generated'; i.value = ext; f.appendChild(i);
  document.body.appendChild(f); f.submit();
}

/* MAC combo suggestion (unchanged) */
function attachMacCombos() {
  const macList = Array.isArray(MAC_LIST) ? MAC_LIST : [];
  document.querySelectorAll('.mac-combo').forEach(combo => {
    const input = combo.querySelector('.mac-combo-input');
    const listEl = combo.querySelector('.mac-combo-list');
    if (!input || !listEl) return;
    const ext = combo.getAttribute('data-ext') || '';
    function normalizeDisplayMac(s){ return String(s||'').replace(/[^A-Fa-f0-9]/g,'').toUpperCase(); }
    function findModelForMac(mac) {
      if (!mac) return '';
      for (let i=0;i<macList.length;i++){
        const m = (macList[i].mac || macList[i].MAC || '').toString().replace(/[^A-Fa-f0-9]/g,'').toUpperCase();
        if (m === mac) return (macList[i].model || '').toString();
      }
      return '';
    }
    function setModelForExt(extLocal, model) {
      if (!extLocal) return;
      const sel = document.querySelector('select[name="assign['+extLocal+'][model]"]');
      if (sel && model) {
        let found=false;
        for (let i=0;i<sel.options.length;i++){
          if (sel.options[i].value === model) { sel.selectedIndex = i; found=true; break; }
        }
        if (!found) { const opt = document.createElement('option'); opt.value = model; opt.text = model; opt.selected = true; sel.appendChild(opt); }
      }
    }
    function buildList(filterQ='') {
      listEl.innerHTML = '';
      const q = normalizeDisplayMac(filterQ);
      let any = 0;
      macList.forEach(it => {
        const mac = normalizeDisplayMac(it.mac || it.MAC || '');
        if (!mac) return;
        const assignedTo = (ASSIGNED_MACS && ASSIGNED_MACS[mac]) ? ASSIGNED_MACS[mac] : null;
        if (assignedTo && assignedTo !== ext) return;
        if (q === '' || mac.indexOf(q) !== -1) {
          const item = document.createElement('div'); item.className = 'mac-combo-item'; item.tabIndex = -1;
          item.dataset.value = mac; item.dataset.model = (it.model || '').toString();
          item.textContent = mac + (it.model ? ' ' + it.model : '');
          listEl.appendChild(item); any++;
        }
      });
      if (any === 0) { const empty = document.createElement('div'); empty.className = 'mac-combo-empty'; empty.textContent = 'No suggestions'; listEl.appendChild(empty); }
      const first = listEl.querySelector('.mac-combo-item'); if (first) first.classList.add('active');
      listEl.style.display = 'block';
    }
    function showList() { buildList(input.value || ''); listEl.style.display = 'block'; }
    function hideListSoon() { setTimeout(()=>listEl.style.display='none', 150); }
    function hideList() { listEl.style.display = 'none'; }

    input.addEventListener('focus', showList);
    input.addEventListener('input', function(){ showList(); });
    input.addEventListener('blur', function(){
      input.value = normalizeDisplayMac(input.value || '');
      const model = findModelForMac(input.value || '');
      if (model) setModelForExt(ext, model);
      hideListSoon();
    });
    input.addEventListener('keydown', function(ev){
      const visible = Array.from(listEl.querySelectorAll('.mac-combo-item')).filter(it => it.offsetParent !== null);
      const active = listEl.querySelector('.mac-combo-item.active');
      if (ev.key === 'ArrowDown') {
        ev.preventDefault();
        if (listEl.style.display !== 'block') { showList(); return; }
        if (!visible.length) return;
        if (!active) { visible[0].classList.add('active'); visible[0].scrollIntoView({block:'nearest'}); return; }
        const idx = visible.indexOf(active); const next = visible[idx+1] || visible[0];
        active.classList.remove('active'); next.classList.add('active'); next.scrollIntoView({block:'nearest'});
      } else if (ev.key === 'ArrowUp') {
        ev.preventDefault();
        if (listEl.style.display !== 'block') { showList(); return; }
        if (!visible.length) return;
        if (!active) { visible[visible.length-1].classList.add('active'); visible[visible.length-1].scrollIntoView({block:'nearest'}); return; }
        const idx = visible.indexOf(active); const prev = visible[idx-1] || visible[visible.length-1];
        active.classList.remove('active'); prev.classList.add('active'); prev.scrollIntoView({block:'nearest'});
      } else if (ev.key === 'Enter') {
        if (listEl.style.display === 'block') {
          const pick = listEl.querySelector('.mac-combo-item.active');
          if (pick && pick.dataset && pick.dataset.value) {
            ev.preventDefault();
            input.value = pick.dataset.value;
            if (pick.dataset.model) setModelForExt(ext, pick.dataset.model);
            input.dispatchEvent(new Event('input',{bubbles:true}));
            hideList();
          }
        }
      } else if (ev.key === 'Escape') { hideList(); }
    });
    listEl.addEventListener('mousedown', function(ev){
      const it = ev.target.closest('.mac-combo-item'); if (!it || !it.dataset) return;
      ev.preventDefault();
      input.value = it.dataset.value || '';
      if (it.dataset.model) setModelForExt(ext, it.dataset.model);
      input.dispatchEvent(new Event('input',{bubbles:true}));
      hideList(); input.focus();
    });
    document.addEventListener('click', function(ev){ if (!combo.contains(ev.target)) hideList(); });
  });
}
</script>
<!-- UI_BUILD: <?= e($UI_BUILD) ?> | file: <?= e(__FILE__) ?> | mtime: <?= filemtime(__FILE__) ?> -->
</body>
</html>